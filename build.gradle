allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'jacoco'

group = 'com.github.gliptak.jallele'

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'jacoco'

    group = 'com.github.gliptak.jallele'
    version = '0.1-SNAPSHOT'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
    
    jacoco {
        toolVersion = "0.8.12"
    }
    
    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }
    
    test.finalizedBy jacocoTestReport
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    group = 'Coverage reports'
    
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

task jacocoRootCoverageVerification(type: JacocoCoverageVerification) {
    description = 'Verifies code coverage metrics based on specified rules for the whole project.'
    group = 'Coverage reports'
    
    dependsOn jacocoRootReport
    
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
    executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
    
    violationRules {
        rule {
            limit {
                minimum = 0.30 // 30% minimum coverage - can be adjusted
            }
        }
    }
}
